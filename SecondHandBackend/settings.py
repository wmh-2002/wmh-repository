"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zf0ke1geu)vrxw%r4=ipm7_!yg*@xxb0)asa(91#4h3$0wb_7j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "SecondHandBackend.apps.users.apps.UsersConfig",
    "SecondHandBackend.apps.product.apps.ProductConfig",
    "SecondHandBackend.apps.prices.apps.PricesConfig",
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]
CORS_ALLOW_ALL_ORIGINS = True  # 允许所有来源，注意上线时建议限定来源

ROOT_URLCONF = 'SecondHandBackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': []
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'SecondHandBackend/media')
WSGI_APPLICATION = 'SecondHandBackend.wsgi.application'

# --------------------------------------------------数据库--------------------------------------------------
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "second_backend_db",  # 数据库名字
        "USER": "root",  # 账户名
        "PASSWORD": "root",  # 密码
        "HOST": "127.0.0.1",  # localhost也可以  代表哪台机器安装了mysql
        "PORT": "3306",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# --------------------------------------------------日志配置--------------------------------------------------
BASE_DIR = os.path.dirname(__file__)
LOG_DIR = os.path.join(BASE_DIR, "logs")
# 使用自定义处理程序
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        }
    },
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s "
                      "%(process)d %(thread)d %(message)s"
        },
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
    },
    "handlers": {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 按时间轮转
            'filename': os.path.join(LOG_DIR, "info.log"),  # 日志文件
            'when': 'D',  # 每天午夜轮转
            'backupCount': 7,  # 保留最近 7 天的备份
            'formatter': 'simple',  # 使用简单格式
            'encoding': 'utf-8',
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
    "root": {
        "level": "WARNING",
        "handlers": ["console"]
    }
}

# 'S'：每秒
# 'M'：每分钟
# 'H'：每小时
# 'D'：每天
# 'midnight'：每天午夜
# 'W0'-'W6'：每周（0=周一，1=周二，依此类推）
# --------------------------------------------------jwt认证--------------------------------------------------
from datetime import timedelta

SIMPLE_JWT = {
    # 访问令牌的生命周期。这里设置为5分钟。
    'ACCESS_TOKEN_LIFETIME': timedelta(days=3),

    # 刷新令牌的生命周期。这里设置为1天。
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),

    # 是否在刷新令牌时生成新的刷新令牌。这里设置为 False 表示不旋转刷新令牌。
    'ROTATE_REFRESH_TOKENS': False,

    # 如果 ROTATE_REFRESH_TOKENS 为 True，这个设置指定是否在旋转后将旧的刷新令牌列入黑名单。
    'BLACKLIST_AFTER_ROTATION': True,

    # 使用的签名算法。这里设置为 HS256。
    'ALGORITHM': 'HS256',

    # 用于签名令牌的秘钥。应该使用你自己的秘钥。
    'SIGNING_KEY': 'your_secret_key',

    # 用于验证令牌的公钥。如果使用对称加密（如 HS256），则设置为 None。
    'VERIFYING_KEY': None,

    # 令牌的受众。通常用于额外的安全检查。默认设置为 None。
    'AUDIENCE': None,

    # 令牌的发行者。通常用于额外的安全检查。默认设置为 None。
    'ISSUER': None,

    # 用于识别令牌的 HTTP 头部类型。这里设置为 'Bearer'。
    'AUTH_HEADER_TYPES': ('Bearer',),

    # 用户模型中的字段名，用于标识用户。这里设置为 'user_id'。
    'USER_ID_FIELD': 'user_id',

    # JWT 载荷中用来存储用户标识的声明。这里设置为 'user_id'。
    'USER_ID_CLAIM': 'user_id',

    # 允许的令牌类型。这里设置为 AccessToken。
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),

    # JWT 载荷中用来存储令牌类型的声明。这里设置为 'token_type'。
    'TOKEN_TYPE_CLAIM': 'token_type',

    # 允许的刷新令牌的生命周期。在过期时间之前允许多少秒内的刷新请求。
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    # 是否验证令牌的过期时间。如果为 False，将允许过期的令牌通过认证。
    'VERIFY_EXP': True,

    # 在令牌中存储的自定义声明。这些声明将在每次生成令牌时添加到载荷中。
    'JTI_CLAIM': 'jti',

    # 是否允许黑名单功能。启用后，旋转刷新令牌时，旧令牌将被列入黑名单。
    'BLACKLIST_ENABLED': True,
}

REST_FRAMEWORK = {
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework_simplejwt.authentication.JWTAuthentication',
    #     'rest_framework.authentication.SessionAuthentication',
    # ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
AUTH_USER_MODEL = 'users.UserProfile'
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
